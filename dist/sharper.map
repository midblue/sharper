{"version":3,"sources":["scripts/log.js","app.js"],"names":["debug","process","env","DEBUG","minLength","resetColor","terminalColors","red","green","yellow","blue","magenta","cyan","white","module","exports","name","color","debugOnly","length","isBrowser","window","browserPrefix","args","console","log","undefined","prefix","colorCode","time","Date","timeStamp","twoDigits","getHours","getMinutes","getSeconds","d","toString","sharp","require","fs","path","prompt","calledFromCommandLine","main","status","err","DEFAULT_SOURCE","DEFAULT_OUTPUT_FOLDER","promptSettings","properties","source","required","default","outputFolder","width","pattern","message","type","height","start","runPrompt","get","enteredOptions","resizeProgrammatically","initializeResize","options","Promise","resolve","results","checkOptions","messages","resized","success","fail","isImage","isFolder","detailsOfImagesToResize","detailsOfOutputFolderImages","parsedImagePath","exec","push","sourceImage","sourceDir","fileName","overwrite","getDataOfImageFilesInFolder","sourceDetails","removeDuplicateFiles","resizedImageDetails","resizeArrayOfImages","details","output","pop","parseInt","isNaN","replace","fileInfo","resizePromises","map","info","resizeImage","all","then","outputFolderFullPath","outputImageFullPath","createFolder","resize","max","toFile","catch","e","access","code","mkdir","getFilesInFolder","readdir","files","Array","isArray","filter","toRemoveFrom","comparison","fileData","find","comparisonData","anyData"],"mappings":"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","file":"sharper.map","sourceRoot":"..","sourcesContent":["const debug = process.env.DEBUG\nlet minLength = 1\nconst resetColor = '\\x1b[0m'\nconst terminalColors = {\n\tred: '\\x1b[31m',\n\tgreen: '\\x1b[32m',\n\tyellow: '\\x1b[33m',\n\tblue: '\\x1b[34m',\n\tmagenta: '\\x1b[35m',\n\tcyan: '\\x1b[36m',\n\twhite: '\\x1b[37m',\n}\n\nmodule.exports = function (name, color = 'green', debugOnly = false) {\n\tif (minLength < name.length + 1)\n\t\tminLength = name.length + 1\n\n\tconst isBrowser = typeof window !== 'undefined'\n\tlet browserPrefix = name + ' '\n\twhile (browserPrefix.length < minLength)\n\t\tbrowserPrefix += ' '\n\tbrowserPrefix += '| '\n\tif (isBrowser)\n\t\treturn (...args) => {\n\t\t\tconsole.log(`%c${browserPrefix}%c`, `color: ${color}`, `color: black`, ...args)\n\t\t}\n\n\tif (debugOnly && !debug) return () => undefined\n\treturn (...args) => {\n\t\tlet prefix = name + ' '\n\t\twhile (prefix.length < minLength)\n\t\t\tprefix += ' '\n\t\tprefix += '| '\n\t\tconst colorCode = terminalColors[color] || terminalColors.white\n\t\tconst time = new Date()\n\t\tconst timeStamp = twoDigits(time.getHours()) + ':' + twoDigits(time.getMinutes()) + ':' + twoDigits(time.getSeconds())\n\t\tconsole.log(colorCode + (timeStamp + ' '  + prefix) + resetColor, ...args)\n\t}\n}\n\nfunction twoDigits(d) {\n\tif (0 <= d && d < 10) return \"0\" + d.toString()\n\tif (-10 < d && d < 0) return \"-0\" + (-1 * d).toString()\n\treturn d.toString()\n}","const sharp = require('sharp')\nconst fs = require('fs')\nconst path = require('path')\nconst prompt = require('prompt')\nconst calledFromCommandLine = require.main === module\nconst log = require('./scripts/log')\n\nconst status = log('success')\nconst err = log('sharper error', 'red')\n\nconst DEFAULT_SOURCE = './'\nconst DEFAULT_OUTPUT_FOLDER = 'resized'\n\nconst promptSettings = {\n  properties: {\n    source: {\n      required: true,\n      default: DEFAULT_SOURCE\n    },\n    outputFolder: {\n      required: false,\n      default: DEFAULT_OUTPUT_FOLDER\n    },\n    width: {\n      pattern: /^\\d*$/,\n      message: 'Must be an integer',\n      type: 'integer',\n      required: false\n    },\n    height: {\n      pattern: /^\\d*$/,\n      message: 'Must be an integer',\n      type: 'integer',\n      required: false\n    },\n  }\n}\n\nif (calledFromCommandLine) {\n  prompt.start()\n  runPrompt()\n}\n\nfunction runPrompt () {\n  prompt.get(promptSettings, async (err, enteredOptions) => {\n    if (err) return err(err)\n    await resizeProgrammatically(enteredOptions)\n    runPrompt()\n  })\n}\n\nfunction initializeResize (options) {\n  return new Promise (async resolve => {\n    const results = await resizeProgrammatically(options)\n    resolve(results)\n    // could add watching here later, etc\n  })\n}\n\nfunction resizeProgrammatically (options) {\n  return new Promise(async resolve => {\n\n    options = checkOptions(options)\n    if (options.err) {\n      err(options.err)\n      return resolve(options)\n    }\n\n    const messages = []\n    const source = []\n    const resized = []\n    let success, fail\n\n    if (isImage(options.source) || isFolder(options.source)) {\n\n      let detailsOfImagesToResize = []\n      let detailsOfOutputFolderImages\n\n      if (isImage(options.source)) {\n        const parsedImagePath = /(.*\\/)?([^/]+\\.(?:jpe?g|png))$/gim.exec(options.source)\n        detailsOfImagesToResize.push({\n          sourceImage: path.resolve(parsedImagePath[0]),\n          sourceDir: path.resolve(parsedImagePath[1] || '.'),\n          fileName: parsedImagePath[2],\n        })\n        if (!options.overwrite)\n          detailsOfOutputFolderImages = await getDataOfImageFilesInFolder(path.resolve(parsedImagePath[1] || '.', options.outputFolder))\n      }\n\n      else {\n        const sourceDetails = await getDataOfImageFilesInFolder(options.source)\n        // need to check for returned error here\n        detailsOfImagesToResize.push(...sourceDetails)\n        if (!options.overwrite)\n          detailsOfOutputFolderImages = await getDataOfImageFilesInFolder(path.resolve(options.source, options.outputFolder))\n      }\n\n      if (!options.overwrite) {\n        // need to check for returned error here\n        detailsOfImagesToResize = removeDuplicateFiles(detailsOfImagesToResize, detailsOfOutputFolderImages)\n      }\n\n      const resizedImageDetails = await resizeArrayOfImages(detailsOfImagesToResize, { ...options })\n      success = resizedImageDetails.length\n      fail = detailsOfImagesToResize.length - success\n\n      messages.push('Resized images:')\n      for (let details of resizedImageDetails) {\n        source.push(details.source)\n        resized.push(details.output)\n        messages.push(`   ${details.fileName}`)\n      }\n      if (resizedImageDetails.length === 0) {\n        messages.pop()\n      }\n      else\n        messages.push(`to ${path.resolve(options.source, options.outputFolder)}`)\n\n    }\n\n    else {\n      messages.push('Invalid path or image type.')\n      resolve ({ err: 'Invalid path or image type' })\n    }\n\n    if (messages.length > 0 && calledFromCommandLine) {\n      console.log('')\n      for (let message of messages)\n        status(message)\n      console.log('')\n    }\n\n    resolve({ source, resized, success, fail })\n\n  })\n}\n\nfunction checkOptions(options) {\n  options.width = parseInt(options.width)\n  options.height = parseInt(options.height)\n  if (isNaN(options.width)) delete options.width\n  if (isNaN(options.height)) delete options.height\n\n  if (options.overwrite !== true && options.overwrite !== false)\n    options.overwrite = false\n\n  options.source = (options.source || DEFAULT_SOURCE).replace(/\\s+$/g, '')\n  options.outputFolder = (options.outputFolder || DEFAULT_OUTPUT_FOLDER).replace(/^\\//g, '')\n\n  if (!options.width && !options.height)\n    return { err: 'Must specify at least one valid dimension' }\n  if (options.width <= 0 || options.height <= 0)\n    return { err: 'Invalid width or height value.' }\n  if (options.source.length === 0)\n    options.source = './'\n\n  return options\n}\n\nfunction resizeArrayOfImages(fileInfo, options) {\n  return new Promise (async resolve => {\n    const resizePromises = fileInfo\n      .map(async info => await resizeImage({\n        ...options,\n        fileName: info.fileName,\n        sourceImage: info.sourceImage,\n        sourceDir: info.sourceDir\n      }))\n\n    Promise.all(resizePromises)\n      .then((fileInfo) => resolve(fileInfo))\n  })\n}\n\nasync function resizeImage({ sourceImage, sourceDir, fileName, width, height, outputFolder }) {\n  const outputFolderFullPath = path.resolve(sourceDir, outputFolder)\n  const outputImageFullPath = outputFolderFullPath + '/' + fileName\n\n  await createFolder(outputFolderFullPath)\n\n  return sharp(sourceImage)\n    .resize(width, height)\n    .max()\n    .toFile(outputImageFullPath)\n    .then(() => {\n      return {\n        source: path.resolve(sourceImage),\n        fileName,\n        output: outputImageFullPath,\n      }\n    })\n    .catch(e => err(e))\n}\n\nfunction createFolder (path) {\n  return new Promise (resolve => {\n    fs.access(path, (err) => {\n      if (err && err.code !== 'EEXIST') {\n        fs.mkdir(path, () => {\n          resolve()\n        })\n      }\n      else resolve ()\n    })\n  })\n}\n\nfunction getFilesInFolder (path) {\n  return new Promise(resolve => {\n    fs.readdir(path, (err, files) => {\n      if (err) resolve(err)\n      else resolve(files)\n    })\n  })\n}\n\nfunction getDataOfImageFilesInFolder (sourceDir) {\n  return new Promise (async resolve => {\n    if (!/.*\\/$/g.exec(sourceDir))\n      sourceDir += '/'\n\n    let files = await getFilesInFolder(sourceDir)\n    if (!Array.isArray(files))\n      return resolve(files) //err\n\n    files = files\n      .filter(path => isImage(path))\n      .map(fileName => ({\n          sourceImage: sourceDir + fileName,\n          fileName,\n          sourceDir,\n        })\n      )\n\n    resolve(files)\n  })\n}\n\nfunction removeDuplicateFiles (toRemoveFrom, comparison) {\n  return toRemoveFrom\n    .map(fileData => \n      comparison.find(comparisonData => \n        fileData.fileName === comparisonData.fileName\n      ) ? null : fileData\n    )\n    .filter(anyData => anyData)\n}\n\nfunction isImage (path) {\n  return /.+\\.(?:jpe?g|png)$/gi.exec(path)\n}\nfunction isFolder (path) {\n  return /^(\\.*\\/)?(?:([^/\\n])*\\/)*([^/.\\n])*\\/?$|^.$/gi.exec(path)\n}\n\nmodule.exports = initializeResize"]}